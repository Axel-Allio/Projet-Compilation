/* Jagger.java */
/* Generated By:JavaCC: Do not edit this line. Jagger.java */
import java.util.ArrayList;
import java.util.HashMap;

public class Jagger implements JaggerConstants {
    static Scope parent = null;

    public static void main(String args[]) throws ParseException
    {
        Jagger parser = new Jagger(System.in);
        parser.mainloop();
    }

// Main lopp: read expressions on a line until end of file.
//     mainloop → (expression | scope)* <EOF>
  static final public void mainloop() throws ParseException {Expression a;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:
      case LET:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:{
        a = print();
        break;
        }
      case LET:{
        a = scope();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
new PrettyPrinter(a); System.out.println(); new Evaluator(a);; parent=null;
    }
    jj_consume_token(0);
  }

//Statement
//statement → print | comparison
  static final public Expression statement() throws ParseException {Token t; Expression a;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LRB:
    case IF:
    case LET:
    case NUMBER:
    case STRING:
    case 27:
    case 28:{
      a = comparison();
      break;
      }
    case PRINT:{
      a = print();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
  }

//  scope -> let (declaration)* in instruction (, instruction)* end
  static final public Expression scope() throws ParseException {Expression a; Scope s = new Scope(parent); parent=s;
    jj_consume_token(LET);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      declaration();
    }
    jj_consume_token(IN);
    a = statement();
s.addInstruction(a);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      a = statement();
s.addInstruction(a);
    }
    jj_consume_token(END);
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
  }

//  declaration -> (var <VARIABLE> := comparison)*
  static final public void declaration() throws ParseException {Token t; Exp a;
    jj_consume_token(VAR);
    t = jj_consume_token(VARIABLE);
    jj_consume_token(ASSIGN);
    a = comparison();
parent.addDeclaration(t.toString(), a);
  }

//Print.
// print -> print(comparison())
  static final public Expression print() throws ParseException {Expression a;
    jj_consume_token(PRINT);
    jj_consume_token(LRB);
    a = comparison();
    jj_consume_token(RRB);
{if ("" != null) return new Print(a);}
    throw new Error("Missing return statement in function");
  }

// Comparison operators.
// C -> E ('=='E | '<>'E | '>'E | '<'E | '>='E | '<='E)*
  static final public Expression comparison() throws ParseException {Expression a,b;
    a = expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 21:{
        jj_consume_token(21);
        b = expression();
a = new Equal(a,b);
        break;
        }
      case 22:{
        jj_consume_token(22);
        b = expression();
a = new NonEqual(a,b);
        break;
        }
      case 23:{
        jj_consume_token(23);
        b = expression();
a = new Sup(a,b);
        break;
        }
      case 24:{
        jj_consume_token(24);
        b = expression();
a = new Inf(a,b);
        break;
        }
      case 25:{
        jj_consume_token(25);
        b = expression();
a = new SupEqual(a,b);
        break;
        }
      case 26:{
        jj_consume_token(26);
        b = expression();
a = new InfEqual(a,b);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
  }

// Expression (the axiom).
// E -> T ('+'T | '-'T)*
  static final public Expression expression() throws ParseException {Expression a,b;
    a = term();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 27:
    case 28:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 27:{
        jj_consume_token(27);
        b = term();
a=new Add(a,b);
        break;
        }
      case 28:{
        jj_consume_token(28);
        b = term();
a=new Sub(a,b);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
  }

// Term.
// T -> U ('*'U | '/'U)*
  static final public Expression term() throws ParseException {Expression a,b;
    a = unary();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 29:
      case 30:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 29:{
        jj_consume_token(29);
        b = term();
a=new Mul(a,b);
        break;
        }
      case 30:{
        jj_consume_token(30);
        b = term();
a=new Div(a,b);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
  }

//Unary expression
// U -> "-" F | ("+")?F
  static final public Expression unary() throws ParseException {Expression a;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 28:{
      jj_consume_token(28);
      a = prefactor();
a=new Neg(a);
      break;
      }
    case LRB:
    case IF:
    case LET:
    case NUMBER:
    case STRING:
    case 27:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 27:{
        jj_consume_token(27);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      a = prefactor();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
  }

// Factor of an expression.
// F -> <NUMBER> | "(" E ")"
  static final public Expression factor() throws ParseException {Token t; Expression a;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      t = jj_consume_token(NUMBER);
a = new Num(Double.parseDouble(t.toString()));
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
a = new Char(t.toString());
      break;
      }
    case LRB:{
      jj_consume_token(LRB);
      a = comparison();
      jj_consume_token(RRB);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression prefactor() throws ParseException {Expression a,b,c;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        jj_consume_token(IF);
        a = comparison();
        jj_consume_token(THEN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LRB:
        case IF:
        case LET:
        case NUMBER:
        case STRING:
        case 27:
        case 28:{
          b = comparison();
          break;
          }
        case PRINT:{
          b = print();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ELSE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LRB:
        case IF:
        case LET:
        case NUMBER:
        case STRING:
        case 27:
        case 28:{
          c = comparison();
          break;
          }
        case PRINT:{
          c = print();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
a = new IfThenElse(a,b,c);
        break;
        }
      case LRB:
      case NUMBER:
      case STRING:{
        a = factor();
        break;
        }
      case LET:{
        a = scope();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LRB:
      case IF:
      case LET:
      case NUMBER:
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
    }
{if ("" != null) return a;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JaggerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x410,0x410,0x180604b0,0x4000,0x2000,0x7e00000,0x7e00000,0x18000000,0x18000000,0x60000000,0x60000000,0x8000000,0x180604a0,0x60020,0x180604b0,0x180604b0,0x604a0,0x604a0,};
   }

  /** Constructor with InputStream. */
  public Jagger(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Jagger(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JaggerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Jagger(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JaggerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Jagger(JaggerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JaggerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
