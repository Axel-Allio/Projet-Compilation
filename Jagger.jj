// Options for JavaCC.
options { LOOKAHEAD=1; FORCE_LA_CHECK=true; }

// Fonction principale
PARSER_BEGIN(Jagger)
public class Jagger
{
    public static void main(String args[]) throws ParseException
    {
        Jagger parser = new Jagger(System.in);
        parser.mainloop();
    }
}
PARSER_END(Jagger)

// Characters to ignore.
SKIP: { " " | "\r" | "\t" }

// Token specifications.
TOKEN:
{
    < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)*)? >  // A decimal number.
|   < DIGIT: ["0"-"9"] >                      // A decimal digit.
|   < EOL: "\n" >                             // End of line.
}

// Main lopp: read expressions on a line until end of file.
//     mainloop â†’ (expression <EOL>)* <EOF>
void mainloop():
{ double a; }
{
    (
      a=expression() <EOL> { System.out.println(a); }
    )*
    <EOF>
}

// Expression (the axiom).
// E -> T ('+'T | '-'T)*
Expression expression():
{ Expression a,b; }
{
    a=term()
    (
      "+" b=expression() { new Add(a,b); }
    | "-" b=expression() { new Sub(a,b); }
    )? { return a; }
}

// Term.
// T -> U ('*'U | '/'U)*
Expression term():
{ Expression a,b; }
{
    a=factor()
    (
      "*" b=factor() { new Mult(a,b); }
    | "/" b=factor() { new Div(a,b) }
    )* { return a; }
}


//Unary expression
// U -> "-" F | ("+")?F
Expression unary():
{Expression a}
{
    (
    "-" factor() {new Negative(a);}
    | ("+")? factor()
    ){return a;}
}

// Factor of an expression.
// F -> <NUMBER> | "(" E ")"
Expression factor():
{ Token t; double e; }
{
      t=<NUMBER> { return Double.parseDouble(t.toString()); }
    | "(" e=expression() ")" { return e; }
}